{
  "service": {
    "service": "LeetLogger",
    "serviceObject": {
      "name": "LeetLogger"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "memorySize": 256,
      "stage": "dev",
      "region": "us-west-2",
      "environment": {
        "questionTable": {
          "Ref": "QuestionTable"
        },
        "entryTable": {
          "Ref": "EntryTable"
        },
        "calendarTable": {
          "Ref": "CalendarTable"
        },
        "s3BucketName": {
          "Ref": "NoteBucket"
        },
        "addEntryTopicArn": {
          "Ref": "AddEntryTopic"
        },
        "deleteEntryTopicArn": {
          "Ref": "DeleteEntryTopic"
        },
        "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "dynamodb:Query"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "QuestionTable",
                "Arn"
              ]
            },
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "QuestionTable",
                      "Arn"
                    ]
                  },
                  "index",
                  "userID-revisionDate-index"
                ]
              ]
            },
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "QuestionTable",
                      "Arn"
                    ]
                  },
                  "index",
                  "userID-title-index"
                ]
              ]
            },
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "QuestionTable",
                      "Arn"
                    ]
                  },
                  "index",
                  "userID-questionType-index"
                ]
              ]
            },
            {
              "Fn::GetAtt": [
                "EntryTable",
                "Arn"
              ]
            },
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "EntryTable",
                      "Arn"
                    ]
                  },
                  "index",
                  "userID-submittedAt-index"
                ]
              ]
            },
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "EntryTable",
                      "Arn"
                    ]
                  },
                  "index",
                  "userID-title-index"
                ]
              ]
            },
            {
              "Fn::GetAtt": [
                "CalendarTable",
                "Arn"
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject",
            "s3:UploadPart",
            "s3:DeleteObject",
            "s3:SelectObjectContent"
          ],
          "Resource": [
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "NoteBucket",
                      "Arn"
                    ]
                  },
                  "*"
                ]
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": [
            {
              "Ref": "AddEntryTopic"
            },
            {
              "Ref": "DeleteEntryTopic"
            }
          ]
        }
      ],
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AddEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-addEntry"
            }
          },
          "UpdateEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-updateEntry"
            }
          },
          "GetEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-getEntry"
            }
          },
          "DeleteEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-deleteEntry"
            }
          },
          "ListEntriesAllLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-listEntriesAll"
            }
          },
          "ListEntriesBySubmittedAtLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-listEntriesBySubmittedAt"
            }
          },
          "ListEntriesByTitleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-listEntriesByTitle"
            }
          },
          "AddQuestionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-addQuestion"
            }
          },
          "DeleteQuestionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-deleteQuestion"
            }
          },
          "GetQuestionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-getQuestion"
            }
          },
          "ListQuestionAllLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-listQuestionAll"
            }
          },
          "ListQuestionByTypeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-listQuestionByType"
            }
          },
          "ListSortedRevisionQuestionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-listSortedRevisionQuestions"
            }
          },
          "ExpediteRevisionDateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-expediteRevisionDate"
            }
          },
          "PostponeRevisionDateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-postponeRevisionDate"
            }
          },
          "CompleteRevisionQuestionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-completeRevisionQuestion"
            }
          },
          "LoginUserS3CreateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/LeetLogger-dev-loginUserS3Create"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "LeetLogger",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/LeetLogger-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/LeetLogger-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "LeetLogger",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AddEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/addEntry.zip"
              },
              "Handler": "src/handlers/entries/addEntry.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-addEntry",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddEntryLogGroup"
            ]
          },
          "AddEntryLambdaVersionh2xGcOpROMf9pZlYwQvbVgo1KGV7XPlHU60TujYOlc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddEntryLambdaFunction"
              },
              "CodeSha256": "boIgYbVgInNJGUvG30j4Adrv3eenonrKFmf4wpX7wJM="
            }
          },
          "UpdateEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/updateEntry.zip"
              },
              "Handler": "src/handlers/entries/updateEntry.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-updateEntry",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEntryLogGroup"
            ]
          },
          "UpdateEntryLambdaVersionj8NRPAaWkXeXptZArcNWambZWjhyi5ChkWrEGMqk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEntryLambdaFunction"
              },
              "CodeSha256": "nGRF3kNjewsId4oS0y0DR6KQoq37Degh8480hmojo5A="
            }
          },
          "GetEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/getEntry.zip"
              },
              "Handler": "src/handlers/entries/getEntry.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-getEntry",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEntryLogGroup"
            ]
          },
          "GetEntryLambdaVersion8NN6Vx3TKIGC6LyM08A9AxSVXAivFlT92jcujL1qnrM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEntryLambdaFunction"
              },
              "CodeSha256": "4fvhsv76PWBz7t5VUaqWe5ITsvdSeO2QvrvEhfm/AwA="
            }
          },
          "DeleteEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/deleteEntry.zip"
              },
              "Handler": "src/handlers/entries/deleteEntry.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-deleteEntry",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteEntryLogGroup"
            ]
          },
          "DeleteEntryLambdaVersionsvNfcBPnpzXDcaxB2mH4bzuWcCSSbLptwcKRRvCws8o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteEntryLambdaFunction"
              },
              "CodeSha256": "w+SMlIeHCH+xLe5GwoKw9GFbVdkZDgf5nMnH50zPBuc="
            }
          },
          "ListEntriesAllLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/listEntriesAll.zip"
              },
              "Handler": "src/handlers/entries/listEntriesAll.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-listEntriesAll",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListEntriesAllLogGroup"
            ]
          },
          "ListEntriesAllLambdaVersionzagoUoYpabkFefdhNPnlM23I1zTx1x6VM39nfkrd5hY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListEntriesAllLambdaFunction"
              },
              "CodeSha256": "KufifFLgsAPc/Z2dVrQ69n3dIHYkqtczbXSznGkJLaU="
            }
          },
          "ListEntriesBySubmittedAtLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/listEntriesBySubmittedAt.zip"
              },
              "Handler": "src/handlers/entries/listEntriesBySubmittedAt.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-listEntriesBySubmittedAt",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListEntriesBySubmittedAtLogGroup"
            ]
          },
          "ListEntriesBySubmittedAtLambdaVersionfHlS0J38TzmELN4PJR3hSNB7da5KeoNCVGEKJ5y5Jts": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListEntriesBySubmittedAtLambdaFunction"
              },
              "CodeSha256": "C/H+7H/y1ejZ6sXR267WW9g9n0myvY1Kv/PhTo/Ww9Q="
            }
          },
          "ListEntriesByTitleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/listEntriesByTitle.zip"
              },
              "Handler": "src/handlers/entries/listEntriesByTitle.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-listEntriesByTitle",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListEntriesByTitleLogGroup"
            ]
          },
          "ListEntriesByTitleLambdaVersion2363rbAbI6oZiDwhGzoXWDNUZXSwW5beU268lPiDBw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListEntriesByTitleLambdaFunction"
              },
              "CodeSha256": "tu8jHPPe/QDJUzv/IsW4/bJ24gDDZvFbFRnC7X6CMz0="
            }
          },
          "AddQuestionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/addQuestion.zip"
              },
              "Handler": "src/handlers/questions/addQuestion.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-addQuestion",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddQuestionLogGroup"
            ]
          },
          "AddQuestionLambdaVersionf9INtyJQglH0Ri7bSpYW7muJV69nMcdDotIYuQ3kKQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddQuestionLambdaFunction"
              },
              "CodeSha256": "MRuquzFkfHN+cXEaX7Z98A6AFssZRGQ3ORdxErkvCj4="
            }
          },
          "DeleteQuestionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/deleteQuestion.zip"
              },
              "Handler": "src/handlers/questions/deleteQuestion.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-deleteQuestion",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteQuestionLogGroup"
            ]
          },
          "DeleteQuestionLambdaVersionjWVAw4eexemW2QRPdfufE2BGldse9pNBnQ6vgi5c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteQuestionLambdaFunction"
              },
              "CodeSha256": "KMEBE6YSF7ECwO0tY8SG3HUQRUXH779vSzVyo4HwQ0E="
            }
          },
          "GetQuestionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/getQuestion.zip"
              },
              "Handler": "src/handlers/questions/getQuestion.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-getQuestion",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetQuestionLogGroup"
            ]
          },
          "GetQuestionLambdaVersionNbM8KU2HGbmSvSeP9iGEJVXgBvVPIG8YYsnsCChGY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetQuestionLambdaFunction"
              },
              "CodeSha256": "kjOZOkaG67jMmv7TDrP+I92y0KgC9ve9tl8ogPbdF9U="
            }
          },
          "ListQuestionAllLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/listQuestionAll.zip"
              },
              "Handler": "src/handlers/questions/listQuestionAll.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-listQuestionAll",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListQuestionAllLogGroup"
            ]
          },
          "ListQuestionAllLambdaVersionUozMEGRwHipAwl1SGAqmeTcWXBJcYIDV6dYFHEwgg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListQuestionAllLambdaFunction"
              },
              "CodeSha256": "jgZDuQj5GsXgmT+ZhHTFFDqjTl3GudT7aTs47/m/PL0="
            }
          },
          "ListQuestionByTypeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/listQuestionByType.zip"
              },
              "Handler": "src/handlers/questions/listQuestionByType.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-listQuestionByType",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListQuestionByTypeLogGroup"
            ]
          },
          "ListQuestionByTypeLambdaVersionNwENKOXsKxke25iTzlQoEJUw8hHulrEXQRt9H6M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListQuestionByTypeLambdaFunction"
              },
              "CodeSha256": "SiydoTmTwUhF1DTelpTL1OA9W/e457yT9Pi+Xw6woKY="
            }
          },
          "ListSortedRevisionQuestionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/listSortedRevisionQuestions.zip"
              },
              "Handler": "src/handlers/questions/listSortedRevisionQuestions.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-listSortedRevisionQuestions",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListSortedRevisionQuestionsLogGroup"
            ]
          },
          "ListSortedRevisionQuestionsLambdaVersionMttc4iLvB5xefkvxn98gZtNttAkl9RhoG0mkE3Xtw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListSortedRevisionQuestionsLambdaFunction"
              },
              "CodeSha256": "eCP+IVSGZxhblHa798MG0hQ0E7kg8qs3Dlh5GMPdLo8="
            }
          },
          "ExpediteRevisionDateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/expediteRevisionDate.zip"
              },
              "Handler": "src/handlers/questions/expediteRevisionDate.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-expediteRevisionDate",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpediteRevisionDateLogGroup"
            ]
          },
          "ExpediteRevisionDateLambdaVersionKGbloI01TzFxlV9EwtPsq8cmUl51X6J6zrVaMTLes": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpediteRevisionDateLambdaFunction"
              },
              "CodeSha256": "z1YQ+agro095wkDLqUwUDiG4ZcLIHebzvUh1iImcyis="
            }
          },
          "PostponeRevisionDateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/postponeRevisionDate.zip"
              },
              "Handler": "src/handlers/questions/postponeRevisionDate.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-postponeRevisionDate",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostponeRevisionDateLogGroup"
            ]
          },
          "PostponeRevisionDateLambdaVersion7TQNvpwID2nCkeF4XskWGLKEeUcWGtWbyDJ9IT4CU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostponeRevisionDateLambdaFunction"
              },
              "CodeSha256": "q75WwUupgvJTjUIdRT8w1+AlPZo+cJxXkgFMzXX/0AI="
            }
          },
          "CompleteRevisionQuestionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/completeRevisionQuestion.zip"
              },
              "Handler": "src/handlers/questions/completeRevisionQuestion.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-completeRevisionQuestion",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CompleteRevisionQuestionLogGroup"
            ]
          },
          "CompleteRevisionQuestionLambdaVersionkAMwScNon43yGI9WQGItEZpxcIOYTdNTqYPX8TrmHAI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CompleteRevisionQuestionLambdaFunction"
              },
              "CodeSha256": "4NDDexl6MRaUhX6FUWuY2GWcW0qrO97RXs5XRgOCJ9k="
            }
          },
          "LoginUserS3CreateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z/loginUserS3Create.zip"
              },
              "Handler": "src/handlers/login/loginUserS3Create.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "LeetLogger-dev-loginUserS3Create",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "questionTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
                  },
                  "entryTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
                  },
                  "calendarTable": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
                  },
                  "s3BucketName": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
                  },
                  "addEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
                  },
                  "deleteEntryTopicArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
                  },
                  "STRIPE_SECRET_KEY": "sk_test_51I0DDwJk1Wzg0X9wyKHOAOJIdPzw7yGkQNDbUdPUPz6oDmUzT7ybzsWqsQlcxrlV9cXFZw5OroC5pq6zMUgz3Im200s0aLmSId"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginUserS3CreateLogGroup"
            ]
          },
          "LoginUserS3CreateLambdaVersion0Du8xNADVlnFyt2LRNLXoiiAdLG9M1qgoOVjgEfKE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginUserS3CreateLambdaFunction"
              },
              "CodeSha256": "nVnSUzEwjYlWYaZ2t1+P2e0F61vTBGaDjK+SDhikojE="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-LeetLogger",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceEntries": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "entries",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEntriesEntryidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEntries"
              },
              "PathPart": "{entryId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEntriesEntryidVarQuestionidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEntriesEntryidVar"
              },
              "PathPart": "{questionId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEntriesList": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEntries"
              },
              "PathPart": "list",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEntriesListEntriesintwodays": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEntriesList"
              },
              "PathPart": "entriesInTwoDays",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEntriesListbytitle": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEntries"
              },
              "PathPart": "listbytitle",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuestions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "questions",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuestionsQuestionidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceQuestions"
              },
              "PathPart": "{questionId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuestionsQuestionidVarExpedite": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVar"
              },
              "PathPart": "expedite",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuestionsQuestionidVarPostpone": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVar"
              },
              "PathPart": "postpone",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuestionsQuestionidVarComplete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVar"
              },
              "PathPart": "complete",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuestionsList": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceQuestions"
              },
              "PathPart": "list",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuestionsListTypeVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceQuestionsList"
              },
              "PathPart": "{type}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuestionsListRevisionquestions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceQuestionsList"
              },
              "PathPart": "revisionQuestions",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEntriesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEntriesEntryidVarQuestionidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesEntryidVarQuestionidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEntriesEntryidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesEntryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEntriesListOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesList"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEntriesListEntriesintwodaysOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesListEntriesintwodays"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEntriesListbytitleOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesListbytitle"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodQuestionsQuestionidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodQuestionsListOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsList"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodQuestionsListTypeVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsListTypeVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodQuestionsListRevisionquestionsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsListRevisionquestions"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodQuestionsQuestionidVarExpediteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVarExpedite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodQuestionsQuestionidVarPostponeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVarPostpone"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodQuestionsQuestionidVarCompleteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVarComplete"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEntriesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEntriesEntryidVarQuestionidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesEntryidVarQuestionidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEntriesEntryidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesEntryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEntriesEntryidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesEntryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEntriesListGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesList"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListEntriesAllLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEntriesListEntriesintwodaysGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesListEntriesintwodays"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListEntriesBySubmittedAtLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEntriesListbytitleGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntriesListbytitle"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListEntriesByTitleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodQuestionsQuestionidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetQuestionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodQuestionsListGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsList"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListQuestionAllLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodQuestionsListTypeVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsListTypeVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListQuestionByTypeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodQuestionsListRevisionquestionsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsListRevisionquestions"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListSortedRevisionQuestionsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodQuestionsQuestionidVarExpeditePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVarExpedite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExpediteRevisionDateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodQuestionsQuestionidVarPostponePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVarPostpone"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PostponeRevisionDateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodQuestionsQuestionidVarCompletePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuestionsQuestionidVarComplete"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CompleteRevisionQuestionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginUserS3CreateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1609218478094": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodEntriesOptions",
              "ApiGatewayMethodEntriesEntryidVarQuestionidVarOptions",
              "ApiGatewayMethodEntriesEntryidVarOptions",
              "ApiGatewayMethodEntriesListOptions",
              "ApiGatewayMethodEntriesListEntriesintwodaysOptions",
              "ApiGatewayMethodEntriesListbytitleOptions",
              "ApiGatewayMethodQuestionsQuestionidVarOptions",
              "ApiGatewayMethodQuestionsListOptions",
              "ApiGatewayMethodQuestionsListTypeVarOptions",
              "ApiGatewayMethodQuestionsListRevisionquestionsOptions",
              "ApiGatewayMethodQuestionsQuestionidVarExpediteOptions",
              "ApiGatewayMethodQuestionsQuestionidVarPostponeOptions",
              "ApiGatewayMethodQuestionsQuestionidVarCompleteOptions",
              "ApiGatewayMethodLoginOptions",
              "ApiGatewayMethodEntriesPost",
              "ApiGatewayMethodEntriesEntryidVarQuestionidVarPut",
              "ApiGatewayMethodEntriesEntryidVarGet",
              "ApiGatewayMethodEntriesEntryidVarDelete",
              "ApiGatewayMethodEntriesListGet",
              "ApiGatewayMethodEntriesListEntriesintwodaysGet",
              "ApiGatewayMethodEntriesListbytitleGet",
              "ApiGatewayMethodQuestionsQuestionidVarGet",
              "ApiGatewayMethodQuestionsListGet",
              "ApiGatewayMethodQuestionsListTypeVarGet",
              "ApiGatewayMethodQuestionsListRevisionquestionsGet",
              "ApiGatewayMethodQuestionsQuestionidVarExpeditePost",
              "ApiGatewayMethodQuestionsQuestionidVarPostponePost",
              "ApiGatewayMethodQuestionsQuestionidVarCompletePost",
              "ApiGatewayMethodLoginPost"
            ]
          },
          "AddEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListEntriesAllLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListEntriesAllLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListEntriesBySubmittedAtLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListEntriesBySubmittedAtLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListEntriesByTitleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListEntriesByTitleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetQuestionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetQuestionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListQuestionAllLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListQuestionAllLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListQuestionByTypeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListQuestionByTypeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListSortedRevisionQuestionsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListSortedRevisionQuestionsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ExpediteRevisionDateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpediteRevisionDateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostponeRevisionDateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostponeRevisionDateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CompleteRevisionQuestionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CompleteRevisionQuestionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginUserS3CreateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginUserS3CreateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddQuestionSnsSubscriptionAddEntryTopicdev": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AddEntryTopic"
              },
              "Protocol": "lambda",
              "Endpoint": {
                "Fn::GetAtt": [
                  "AddQuestionLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "AddQuestionLambdaPermissionAddEntryTopicdevSNS": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddQuestionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "sns.amazonaws.com",
              "SourceArn": {
                "Ref": "AddEntryTopic"
              }
            }
          },
          "DeleteQuestionSnsSubscriptionDeleteEntryTopicdev": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "DeleteEntryTopic"
              },
              "Protocol": "lambda",
              "Endpoint": {
                "Fn::GetAtt": [
                  "DeleteQuestionLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "DeleteQuestionLambdaPermissionDeleteEntryTopicdevSNS": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteQuestionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "sns.amazonaws.com",
              "SourceArn": {
                "Ref": "DeleteEntryTopic"
              }
            }
          },
          "QuestionTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "LeetLogger-QuestionTable-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userID",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "questionID",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "questionType",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "title",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "revisionDate",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userID",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "questionID",
                  "KeyType": "RANGE"
                }
              ],
              "LocalSecondaryIndexes": [
                {
                  "IndexName": "userID-revisionDate-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userID",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "revisionDate",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "userID-title-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userID",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "title",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "userID-questionType-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userID",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "questionType",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "EntryTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "LeetLogger-EntryTable-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userID",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "entryID",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "submittedAt",
                  "AttributeType": "N"
                },
                {
                  "AttributeName": "title",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userID",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "entryID",
                  "KeyType": "RANGE"
                }
              ],
              "LocalSecondaryIndexes": [
                {
                  "IndexName": "userID-submittedAt-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userID",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "submittedAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "userID-title-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userID",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "title",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "CalendarTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "LeetLogger-CalendarTable-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userID",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "NoteBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "leetlogger-notes-bucket-q12hg7y-dev"
            }
          },
          "AddEntryTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "AddEntryTopic-dev"
            }
          },
          "DeleteEntryTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "DeleteEntryTopic-dev"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "AddEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddEntryLambdaVersionh2xGcOpROMf9pZlYwQvbVgo1KGV7XPlHU60TujYOlc"
            }
          },
          "UpdateEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEntryLambdaVersionj8NRPAaWkXeXptZArcNWambZWjhyi5ChkWrEGMqk"
            }
          },
          "GetEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEntryLambdaVersion8NN6Vx3TKIGC6LyM08A9AxSVXAivFlT92jcujL1qnrM"
            }
          },
          "DeleteEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteEntryLambdaVersionsvNfcBPnpzXDcaxB2mH4bzuWcCSSbLptwcKRRvCws8o"
            }
          },
          "ListEntriesAllLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListEntriesAllLambdaVersionzagoUoYpabkFefdhNPnlM23I1zTx1x6VM39nfkrd5hY"
            }
          },
          "ListEntriesBySubmittedAtLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListEntriesBySubmittedAtLambdaVersionfHlS0J38TzmELN4PJR3hSNB7da5KeoNCVGEKJ5y5Jts"
            }
          },
          "ListEntriesByTitleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListEntriesByTitleLambdaVersion2363rbAbI6oZiDwhGzoXWDNUZXSwW5beU268lPiDBw"
            }
          },
          "AddQuestionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddQuestionLambdaVersionf9INtyJQglH0Ri7bSpYW7muJV69nMcdDotIYuQ3kKQ"
            }
          },
          "DeleteQuestionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteQuestionLambdaVersionjWVAw4eexemW2QRPdfufE2BGldse9pNBnQ6vgi5c"
            }
          },
          "GetQuestionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetQuestionLambdaVersionNbM8KU2HGbmSvSeP9iGEJVXgBvVPIG8YYsnsCChGY"
            }
          },
          "ListQuestionAllLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListQuestionAllLambdaVersionUozMEGRwHipAwl1SGAqmeTcWXBJcYIDV6dYFHEwgg"
            }
          },
          "ListQuestionByTypeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListQuestionByTypeLambdaVersionNwENKOXsKxke25iTzlQoEJUw8hHulrEXQRt9H6M"
            }
          },
          "ListSortedRevisionQuestionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListSortedRevisionQuestionsLambdaVersionMttc4iLvB5xefkvxn98gZtNttAkl9RhoG0mkE3Xtw"
            }
          },
          "ExpediteRevisionDateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpediteRevisionDateLambdaVersionKGbloI01TzFxlV9EwtPsq8cmUl51X6J6zrVaMTLes"
            }
          },
          "PostponeRevisionDateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostponeRevisionDateLambdaVersion7TQNvpwID2nCkeF4XskWGLKEeUcWGtWbyDJ9IT4CU"
            }
          },
          "CompleteRevisionQuestionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CompleteRevisionQuestionLambdaVersionkAMwScNon43yGI9WQGItEZpxcIOYTdNTqYPX8TrmHAI"
            }
          },
          "LoginUserS3CreateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginUserS3CreateLambdaVersion0Du8xNADVlnFyt2LRNLXoiiAdLG9M1qgoOVjgEfKE"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "QuestionTable": {
        "name": {
          "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"questionTable\"]"
        },
        "arn": {
          "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0][\"Resource\"][0]"
        }
      },
      "EntryTable": {
        "name": {
          "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"entryTable\"]"
        },
        "arn": {
          "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0][\"Resource\"][4]"
        }
      },
      "CalendarTable": {
        "name": {
          "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"calendarTable\"]"
        },
        "arn": {
          "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0][\"Resource\"][7]"
        }
      },
      "NoteBucket": {
        "name": {
          "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"s3BucketName\"]"
        },
        "arn": {
          "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1][\"Resource\"][0][\"Fn::Join\"][1][0]"
        }
      },
      "AddEntryTopic": {
        "name": "AddEntryTopic-dev",
        "arn": {
          "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"addEntryTopicArn\"]"
        }
      },
      "DeleteEntryTopic": {
        "name": "DeleteEntryTopic-dev",
        "arn": {
          "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"deleteEntryTopicArn\"]"
        }
      },
      "bundle": {
        "linting": false
      },
      "webpack": {
        "packager": "npm",
        "packagerOptions": {},
        "webpackConfig": "node_modules/serverless-bundle/src/webpack.config.js",
        "includeModules": {
          "forceExclude": [
            "aws-sdk"
          ],
          "forceInclude": null,
          "packagePath": "package.json"
        }
      }
    },
    "plugins": [
      "serverless-bundle",
      "serverless-offline",
      "serverless-dotenv-plugin",
      "serverless-pseudo-parameters"
    ],
    "pluginsData": {},
    "functions": {
      "addEntry": {
        "handler": "src/handlers/entries/addEntry.main",
        "events": [
          {
            "http": {
              "path": "entries",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-addEntry",
        "package": {
          "artifact": ".serverless/addEntry.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddEntryLambdaVersionh2xGcOpROMf9pZlYwQvbVgo1KGV7XPlHU60TujYOlc"
      },
      "updateEntry": {
        "handler": "src/handlers/entries/updateEntry.main",
        "events": [
          {
            "http": {
              "path": "entries/{entryId}/{questionId}",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-updateEntry",
        "package": {
          "artifact": ".serverless/updateEntry.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateEntryLambdaVersionj8NRPAaWkXeXptZArcNWambZWjhyi5ChkWrEGMqk"
      },
      "getEntry": {
        "handler": "src/handlers/entries/getEntry.main",
        "events": [
          {
            "http": {
              "path": "entries/{entryId}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-getEntry",
        "package": {
          "artifact": ".serverless/getEntry.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetEntryLambdaVersion8NN6Vx3TKIGC6LyM08A9AxSVXAivFlT92jcujL1qnrM"
      },
      "deleteEntry": {
        "handler": "src/handlers/entries/deleteEntry.main",
        "events": [
          {
            "http": {
              "path": "entries/{entryId}",
              "method": "delete",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-deleteEntry",
        "package": {
          "artifact": ".serverless/deleteEntry.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteEntryLambdaVersionsvNfcBPnpzXDcaxB2mH4bzuWcCSSbLptwcKRRvCws8o"
      },
      "listEntriesAll": {
        "handler": "src/handlers/entries/listEntriesAll.main",
        "events": [
          {
            "http": {
              "path": "entries/list",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-listEntriesAll",
        "package": {
          "artifact": ".serverless/listEntriesAll.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ListEntriesAllLambdaVersionzagoUoYpabkFefdhNPnlM23I1zTx1x6VM39nfkrd5hY"
      },
      "listEntriesBySubmittedAt": {
        "handler": "src/handlers/entries/listEntriesBySubmittedAt.main",
        "events": [
          {
            "http": {
              "path": "entries/list/entriesInTwoDays",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-listEntriesBySubmittedAt",
        "package": {
          "artifact": ".serverless/listEntriesBySubmittedAt.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ListEntriesBySubmittedAtLambdaVersionfHlS0J38TzmELN4PJR3hSNB7da5KeoNCVGEKJ5y5Jts"
      },
      "listEntriesByTitle": {
        "handler": "src/handlers/entries/listEntriesByTitle.main",
        "events": [
          {
            "http": {
              "path": "entries/listbytitle",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-listEntriesByTitle",
        "package": {
          "artifact": ".serverless/listEntriesByTitle.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ListEntriesByTitleLambdaVersion2363rbAbI6oZiDwhGzoXWDNUZXSwW5beU268lPiDBw"
      },
      "addQuestion": {
        "handler": "src/handlers/questions/addQuestion.main",
        "events": [
          {
            "sns": {
              "topicName": "AddEntryTopic-dev",
              "arn": {
                "Ref": "AddEntryTopic"
              }
            }
          }
        ],
        "name": "LeetLogger-dev-addQuestion",
        "package": {
          "artifact": ".serverless/addQuestion.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddQuestionLambdaVersionf9INtyJQglH0Ri7bSpYW7muJV69nMcdDotIYuQ3kKQ"
      },
      "deleteQuestion": {
        "handler": "src/handlers/questions/deleteQuestion.main",
        "events": [
          {
            "sns": {
              "topicName": "DeleteEntryTopic-dev",
              "arn": {
                "Ref": "DeleteEntryTopic"
              }
            }
          }
        ],
        "name": "LeetLogger-dev-deleteQuestion",
        "package": {
          "artifact": ".serverless/deleteQuestion.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteQuestionLambdaVersionjWVAw4eexemW2QRPdfufE2BGldse9pNBnQ6vgi5c"
      },
      "getQuestion": {
        "handler": "src/handlers/questions/getQuestion.main",
        "events": [
          {
            "http": {
              "path": "questions/{questionId}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-getQuestion",
        "package": {
          "artifact": ".serverless/getQuestion.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetQuestionLambdaVersionNbM8KU2HGbmSvSeP9iGEJVXgBvVPIG8YYsnsCChGY"
      },
      "listQuestionAll": {
        "handler": "src/handlers/questions/listQuestionAll.main",
        "events": [
          {
            "http": {
              "path": "questions/list",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-listQuestionAll",
        "package": {
          "artifact": ".serverless/listQuestionAll.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ListQuestionAllLambdaVersionUozMEGRwHipAwl1SGAqmeTcWXBJcYIDV6dYFHEwgg"
      },
      "listQuestionByType": {
        "handler": "src/handlers/questions/listQuestionByType.main",
        "events": [
          {
            "http": {
              "path": "questions/list/{type}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-listQuestionByType",
        "package": {
          "artifact": ".serverless/listQuestionByType.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ListQuestionByTypeLambdaVersionNwENKOXsKxke25iTzlQoEJUw8hHulrEXQRt9H6M"
      },
      "listSortedRevisionQuestions": {
        "handler": "src/handlers/questions/listSortedRevisionQuestions.main",
        "events": [
          {
            "http": {
              "path": "questions/list/revisionQuestions",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-listSortedRevisionQuestions",
        "package": {
          "artifact": ".serverless/listSortedRevisionQuestions.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ListSortedRevisionQuestionsLambdaVersionMttc4iLvB5xefkvxn98gZtNttAkl9RhoG0mkE3Xtw"
      },
      "expediteRevisionDate": {
        "handler": "src/handlers/questions/expediteRevisionDate.main",
        "events": [
          {
            "http": {
              "path": "questions/{questionId}/expedite",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-expediteRevisionDate",
        "package": {
          "artifact": ".serverless/expediteRevisionDate.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ExpediteRevisionDateLambdaVersionKGbloI01TzFxlV9EwtPsq8cmUl51X6J6zrVaMTLes"
      },
      "postponeRevisionDate": {
        "handler": "src/handlers/questions/postponeRevisionDate.main",
        "events": [
          {
            "http": {
              "path": "questions/{questionId}/postpone",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-postponeRevisionDate",
        "package": {
          "artifact": ".serverless/postponeRevisionDate.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "PostponeRevisionDateLambdaVersion7TQNvpwID2nCkeF4XskWGLKEeUcWGtWbyDJ9IT4CU"
      },
      "completeRevisionQuestion": {
        "handler": "src/handlers/questions/completeRevisionQuestion.main",
        "events": [
          {
            "http": {
              "path": "questions/{questionId}/complete",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-completeRevisionQuestion",
        "package": {
          "artifact": ".serverless/completeRevisionQuestion.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CompleteRevisionQuestionLambdaVersionkAMwScNon43yGI9WQGItEZpxcIOYTdNTqYPX8TrmHAI"
      },
      "loginUserS3Create": {
        "handler": "src/handlers/login/loginUserS3Create.main",
        "events": [
          {
            "http": {
              "path": "login",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "LeetLogger-dev-loginUserS3Create",
        "package": {
          "artifact": ".serverless/loginUserS3Create.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "LoginUserS3CreateLambdaVersion0Du8xNADVlnFyt2LRNLXoiiAdLG9M1qgoOVjgEfKE"
      }
    },
    "resources": {
      "Resources": {
        "QuestionTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "LeetLogger-QuestionTable-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userID",
                "AttributeType": "S"
              },
              {
                "AttributeName": "questionID",
                "AttributeType": "S"
              },
              {
                "AttributeName": "questionType",
                "AttributeType": "S"
              },
              {
                "AttributeName": "title",
                "AttributeType": "S"
              },
              {
                "AttributeName": "revisionDate",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userID",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "questionID",
                "KeyType": "RANGE"
              }
            ],
            "LocalSecondaryIndexes": [
              {
                "IndexName": "userID-revisionDate-index",
                "KeySchema": [
                  {
                    "AttributeName": "userID",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "revisionDate",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "userID-title-index",
                "KeySchema": [
                  {
                    "AttributeName": "userID",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "title",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "userID-questionType-index",
                "KeySchema": [
                  {
                    "AttributeName": "userID",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "questionType",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "EntryTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "LeetLogger-EntryTable-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userID",
                "AttributeType": "S"
              },
              {
                "AttributeName": "entryID",
                "AttributeType": "S"
              },
              {
                "AttributeName": "submittedAt",
                "AttributeType": "N"
              },
              {
                "AttributeName": "title",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userID",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "entryID",
                "KeyType": "RANGE"
              }
            ],
            "LocalSecondaryIndexes": [
              {
                "IndexName": "userID-submittedAt-index",
                "KeySchema": [
                  {
                    "AttributeName": "userID",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "submittedAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "userID-title-index",
                "KeySchema": [
                  {
                    "AttributeName": "userID",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "title",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "CalendarTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "LeetLogger-CalendarTable-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userID",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userID",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "NoteBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "leetlogger-notes-bucket-q12hg7y-dev"
          }
        },
        "AddEntryTopic": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "AddEntryTopic-dev"
          }
        },
        "DeleteEntryTopic": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "DeleteEntryTopic-dev"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "package": {
        "individually": true,
        "artifactDirectoryName": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/LeetLogger/dev/1609218490833-2020-12-29T05:08:10.833Z",
    "artifact": ""
  }
}
# NOTE: update this with your service name
service: LeetLogger

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom: 
  bundle: 
    linting: false

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-west-2 
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    questionTable: leetlogger-questions
    entryTable: leetlogger-entries 
    s3BucketName: leetlogger-notes-and-solutions

  iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dyanmodb:DeleteItem
        - dynamodb:Query
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource: 
        arn:aws:dynamodb:us-west-2:*:*
    - Effect: "Allow"
      Action: 
        - s3:*
      Resource: 
        arn:aws:s3:::*
    
functions:
  addEntry:
    handler: src/entries/addEntry.main
    events:
      - http:
          path: entries
          method: post
          cors: true

  updateEntry: 
    handler: src/entries/updateEntry.main
    events:
      - http:
          path: entries/{entryId}
          method: put 
          cors: true
  
  getEntry: 
    handler: src/entries/getEntry.main
    events:
      - http: 
          path: entries/{entryId}
          method: get 
          cors: true

  deleteEntry: 
    handler: src/entries/deleteEntry.main
    events:
      - http:
          path: entries/{entryId}
          method: delete
          cors: true
          
  listEntriesAll:
    handler: src/entries/listEntriesAll.main
    events:
      - http:
          path: entries/list
          method: get 
          cors: true 
  
  listEntriesBySubmittedAt:
      handler: src/entries/listEntriesBySubmittedAt.main
      events: 
        - http:
            path: entries/list/entriesInTwoDays
            method: get 
            cors: true 
  
  listEntriesByTitle:
      handler: src/entries/listEntriesByTitle.main
      events: 
        - http:
            path: entries/list/{title}
            method: get 
            cors: true

  addQuestion: 
    handler: src/questions/addQuestion.main
    events:
      - http:
          path: questions
          method: post
          cors: true

  deleteQuestion:
    handler: src/questions/deleteQuestion.main
    events: 
      - http: 
          path: questions/{questionId}
          method: delete
          cors: true


  getQuestion:
      handler: src/questions/getQuestion.main 
      events: 
        - http: 
          path: questions/{questionId}/{title}
          method: get
          cors: true


  listQuestionAll:
      handler: src/questions/listQuestionAll.main
      events: 
        - http:
            path: questions/list
            method: get 
            cors: true 
  
  listQuestionByType:
    handler: src/questions/listQuestionByType.main
    events:
      - http:
         path: questions/list/{type}
         method: get 
         cors: true 
  
  listSortedRevisionQuestions:
      handler: src/questions/listSortedRevisionQuestions.main
      events:
        - http: 
            path: questions/list/revisionQuestions 
            method: get 
            cors: true 

  expediteRevisionDate:
      handler: src/questions/expediteRevisionDate.main
      events: 
          - http: 
              path: questions/{questionId}/expedite
              method: post 
              cors: true

  postponeRevisionDate:
      handler: src/questions/postponeRevisionDate.main
      events: 
          - http: 
              path: questions/{questionId}/postpone
              method: post 
              cors: true

  completeRevisionQuestion:
    handler: src/questions/completeRevisionQuestion.main
    events: 
      - http: 
          path: questions/{questionId}/complete
          method: post 
          cors: true

  incQuestionEntryCount:
      handler: src/questions/incQuestionEntryCount.main
      events: 
          - http: 
              path: questions/{questionId}/inc
              method: post
              cors: true 

  incQuestyEntryCountAndUpdateRevisionDate:
      handler: src/questions/incQuestionEntryCountAndUpdateRevisionDate.main
      events: 
        - http: 
            path: questions/{questionId}/inc-update
            method: post
            cors: true

  decQuestionEntryCount:
      handler: src/questions/decQuestionEntryCount.main
      events: 
          - http: 
              path: questions/{questionId}dec
              method: post
              cors: true 

  loginUserS3Create:
      handler: src/login/loginUserS3Create.main
      events: 
         - http: 
              path: login
              method: post 
              cors: true

          

  